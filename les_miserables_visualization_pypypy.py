{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.io as sio\n",
    "import numpy as np\n",
    "import time\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.autograd import Variable\n",
    "import matplotlib.pyplot as plt\n",
    "import networkx as nx\n",
    "from sklearn.manifold import TSNE\n",
    "import multiprocessing\n",
    "import logging  # Setting up the loggings to monitor gensim\n",
    "from sklearn.preprocessing import MultiLabelBinarizer\n",
    "from gensim.models import Word2Vec\n",
    "from gensim.models.word2vec import LineSentence\n",
    "# Train a one-vs-rest logistic regression classifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.multiclass import OneVsRestClassifier\n",
    "from sklearn.metrics import f1_score, accuracy_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "import concurrent.futures\n",
    "import os\n",
    "import sys\n",
    "import datetime\n",
    "\n",
    "cores = multiprocessing.cpu_count()  # Count the number of cores in a computer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "class Node2Vec():\n",
    "        def __init__(\n",
    "                        self, \n",
    "                        graph : 'dict[np.ndarray]', \n",
    "                        window_size : int, \n",
    "                        embedding_size : int, \n",
    "                        walks_per_vertex : int, \n",
    "                        walk_length : int,\n",
    "                        p : float,\n",
    "                        q : float\n",
    "                ) -> None:\n",
    "                \"\"\"\n",
    "                Initialize the DeepWalk model. This directly from the paper https://arxiv.org/pdf/1403.6652.pdf.\n",
    "\n",
    "                Parameters\n",
    "                ----------\n",
    "                graph : list[list[int]]\n",
    "                        The adjacency list to be embedded. This is a dict of a np.array. Where adj_list[vertex][0] gives the neighbours indices.\n",
    "                        adj_list[vertex][1] = weights of edges.\n",
    "                window_size : int\n",
    "                        The window size for the skipgram model.\n",
    "                embedding_size : int\n",
    "                        The size of the embedding. The final output matrix will be of size |V| x embedding_size.\n",
    "                walks_per_vertex : int\n",
    "                        The number of walks to perform per vertex.\n",
    "                walk_length : int\n",
    "                        The length of each walk.\n",
    "                p : float\n",
    "                        The return parameter.\n",
    "                q : float\n",
    "                        The in-out parameter.\n",
    "\n",
    "                Methods\n",
    "                -------\n",
    "                generate_n_walks()\n",
    "                        Generate n walks from the graph.\n",
    "                train()\n",
    "                        Train the model.\n",
    "                update()\n",
    "                        Feed model new walks.\n",
    "                get_embeddings()\n",
    "                        Return the embeddings.\n",
    "                \"\"\"\n",
    "\n",
    "                # DeepWalk parameters\n",
    "                self.g = graph\n",
    "                self.w = window_size\n",
    "                self.d = embedding_size\n",
    "                self.gamma = walks_per_vertex\n",
    "                self.epochs = self.gamma\n",
    "                self.t = walk_length\n",
    "                self.n = len(graph)\n",
    "                self.p = p\n",
    "                self.q = q\n",
    "                \n",
    "                # Cutoffs for sampling\n",
    "                self.p0 = 1 / self.p / max(1, self.p, self.q)\n",
    "                self.p1 = 1/  max(1, self.p, self.q)\n",
    "                self.p2 = 1 / self.q / max(1, self.p, self.q)\n",
    "        \n",
    "        def get_random_neighbour(self, vertex : 'int') -> 'int':\n",
    "                \"\"\"\n",
    "                Fetches a random neighbour of a given vertex\n",
    "                by sampling on the basis of the edge weights\n",
    "                \n",
    "                Parameters\n",
    "                ----------\n",
    "                vertex : int\n",
    "                        The vertex whose neighbour we will sample\n",
    "                        \n",
    "                Returns\n",
    "                -------\n",
    "                int\n",
    "                        The neighbour that was sampled\n",
    "                \"\"\"\n",
    "\n",
    "                # Sample a vertex with probability proportional \n",
    "                # to the weight of the edge joining it.\n",
    "                return int(np.random.choice(self.g[vertex][0], p=self.g[vertex][1]))\n",
    "        \n",
    "        def binary_search(self, arr, target): \n",
    "                # Perform binary search\n",
    "                index = np.searchsorted(arr, target)\n",
    "\n",
    "                # Check if the value was found at the given index\n",
    "                return index < len(arr) and arr[index] == target\n",
    "\n",
    "        def second_order_biased_random_walk(\n",
    "                        self,\n",
    "                        adj_list, \n",
    "                        walk_len : 'int', \n",
    "                        start_node : 'int', \n",
    "                        return_parameter :'float', \n",
    "                        in_out_parameter : 'float'\n",
    "                        ) -> np.array:\n",
    "                \"\"\"\n",
    "                Return a walk based on a 2nd order Markov Chain like transition.\n",
    "\n",
    "                Parameters\n",
    "                ----------\n",
    "                adj_mat : list[list[int]]\n",
    "                        Adjacency matrix of the graph.\n",
    "                walk_len : int\n",
    "                        Length of the random walk.\n",
    "                start_node : int\n",
    "                        Starting node of the random walk.\n",
    "                return_parameter : float\n",
    "                        The value of the \"p\" parameter\n",
    "                in_out_parameter : float\n",
    "                        The value of the \"q\" parameter\n",
    "                \n",
    "                Returns\n",
    "                -------\n",
    "                np.array\n",
    "                        List of nodes in the random walk.  \n",
    "                \n",
    "                \"\"\"\n",
    "                # Array to store the walk\n",
    "                walk = [\n",
    "                        start_node,\n",
    "                        self.get_random_neighbour(start_node) # The prev_node is never Null\n",
    "                ]\n",
    "\n",
    "                # Generate the rest of the walk\n",
    "                for i in range(2, walk_len):\n",
    "                    # Variable to check whether we added to walk\n",
    "                    found = False\n",
    "                    \n",
    "                    # Kep running until sampled in the red region\n",
    "                    while not found:\n",
    "                        new_node = self.get_random_neighbour(walk[-1])\n",
    "                        r = np.random.rand()\n",
    "\n",
    "                        # Check if we will go back to the same node\n",
    "                        if new_node == walk[-2]:\n",
    "                            if r < self.p0:\n",
    "                                found = True\n",
    "                        \n",
    "                        # Check if we are going to move by a distance of 1\n",
    "                        # elif self.g[walk[-2]][new_node]:\n",
    "                        elif self.binary_search(self.g[walk[-2]][0], new_node):\n",
    "                            if r < self.p1:\n",
    "                                found = True\n",
    "                                    \n",
    "                        else: # So we are moving by a distance of 2\n",
    "                            if r < self.p2:\n",
    "                                found = True\n",
    "                                \n",
    "                    walk.append(new_node)\n",
    "            \n",
    "                return walk\n",
    "\n",
    "        def generate_walks_for_iteration(self, args):\n",
    "                gamma, g, t, p, q, iteration = args\n",
    "                np.random.seed(iteration)\n",
    "                \n",
    "                walks = []\n",
    "\n",
    "                # print(f\"Started with Iteration #{iteration} at {datetime.datetime.now()}\", file=sys.stdout)\n",
    "                \n",
    "                for vertex in range(self.n):\n",
    "                        walks.append(self.second_order_biased_random_walk(g, t, vertex, p, q))\n",
    "\n",
    "                print(f\"Done with Iteration #{iteration} at {datetime.datetime.now()}\", file=sys.stdout)\n",
    "\n",
    "                filename = f\"./walks/walks_{iteration}.txt\"\n",
    "\n",
    "                with open(filename, 'a') as file:\n",
    "                        for walk in walks:\n",
    "                                walk_str = ' '.join(str(node) for node in walk)\n",
    "                                file.write(walk_str + '\\n')\n",
    "\n",
    "                walks = []\n",
    "\n",
    "        def generate_n_walks_parallel(self, num_iters: int, num_cores):\n",
    "                args_list = [(self.gamma, self.g, self.t, self.p, self.q, iteration) for iteration in range(self.gamma)]\n",
    "\n",
    "                with concurrent.futures.ProcessPoolExecutor(max_workers=num_cores) as executor:\n",
    "                        executor.map(self.generate_walks_for_iteration, args_list)\n",
    "\n",
    "                # print(f\"Done with {self.n * num_iters} nodes at {datetime.datetime.now()}\", file=sys.stdout)\n",
    "\n",
    "        def train(self, epochs : int, lr : float) -> None:\n",
    "                \"\"\"\n",
    "                Train the model.\n",
    "\n",
    "                Parameters\n",
    "                ----------\n",
    "                epochs : int\n",
    "                        Number of epochs to train the model for.\n",
    "                lr : float\n",
    "                        Learning rate for the optimizer.                \n",
    "                \"\"\"         \n",
    "\n",
    "                print(\"Start generating random walks\", file=sys.stdout) \n",
    "                start = time.perf_counter()\n",
    "                # Generate many walks\n",
    "                walks = self.generate_n_walks_parallel(self.gamma, cores)\n",
    "                end = time.perf_counter()\n",
    "                print(f\"Done generating random walks in {round(end - start, 2)} seconds\", file=sys.stdout)\n",
    "\n",
    "                print(\"Creating word2vec model\", file=sys.stdout)\n",
    "\n",
    "                walks = None\n",
    "\n",
    "                # Initialize the model\n",
    "                self.model = Word2Vec(\n",
    "                        walks,\n",
    "                        negative= 10,\n",
    "                        sg=1,\n",
    "                        alpha=0.05,\n",
    "                        epochs=epochs, \n",
    "                        vector_size=self.d,        # embedding dimension\n",
    "                        window=self.w,             # context window size\n",
    "                        min_count=0,\n",
    "                        workers=cores-2\n",
    "                )\n",
    "\n",
    "                for iteration in range(self.gamma):\n",
    "                        walks_file = f\"./walks/walks_{iteration}.txt\"\n",
    "                        if os.path.exists(walks_file):\n",
    "                                walks = LineSentence(walks_file)\n",
    "\n",
    "                                # Train the model incrementally\n",
    "                                self.model.build_vocab(walks, update=(iteration != 0))\n",
    "                                self.model.train(walks, total_examples=self.model.corpus_count, epochs=epochs)\n",
    "                        \n",
    "                        if (iteration % 10) == 0:\n",
    "                                print(f\"Done training the model on the {iteration}th iteration\", file=sys.stdout)\n",
    "\n",
    "                print(\"Done creating word2vec model\", file=sys.stdout)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def les_miserables_graph():\n",
    "    # Create the Les Misérables graph from the built-in dataset in NetworkX\n",
    "    G = nx.les_miserables_graph()\n",
    "    return G\n",
    "\n",
    "def convert_nodes_to_integers(graph):\n",
    "    # Create a mapping between original string labels and integer labels\n",
    "    node_mapping = {node: i for i, node in enumerate(graph.nodes)}\n",
    "\n",
    "    # Convert nodes to integers in the graph\n",
    "    graph_int = nx.relabel_nodes(graph, node_mapping)\n",
    "\n",
    "    return graph_int, node_mapping\n",
    "\n",
    "def sparse_matrix_to_adjacency_list(graph):\n",
    "    adjacency_list = {}\n",
    "    for node in graph.nodes:\n",
    "        neighbors = np.array(list(graph.neighbors(node)), dtype=object)  # Use object type for strings\n",
    "        weights = np.array([float(graph[node][neighbor]['weight']) for neighbor in neighbors], dtype=float)\n",
    "\n",
    "        # Normalize weights\n",
    "        weights /= np.sum(weights)\n",
    "\n",
    "        # Sort neighbors and weights by node number\n",
    "        sort_order = np.argsort(neighbors)\n",
    "        neighbors = np.array(neighbors[sort_order], dtype=object)  # Use object type for strings\n",
    "        weights = weights[sort_order]\n",
    "\n",
    "        adjacency_list[node] = np.column_stack((neighbors, weights)).T\n",
    "\n",
    "    return adjacency_list\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adjacency List:\n",
      "{0: array([[1],\n",
      "       [1.0]], dtype=object), 1: array([[0, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n",
      "       [0.03225806451612903, 0.25806451612903225, 0.3225806451612903,\n",
      "        0.03225806451612903, 0.03225806451612903, 0.03225806451612903,\n",
      "        0.03225806451612903, 0.06451612903225806, 0.03225806451612903,\n",
      "        0.16129032258064516]], dtype=object), 2: array([[1, 3, 10],\n",
      "       [0.47058823529411764, 0.35294117647058826, 0.17647058823529413]],\n",
      "      dtype=object), 3: array([[1, 2, 10],\n",
      "       [0.5263157894736842, 0.3157894736842105, 0.15789473684210525]],\n",
      "      dtype=object), 4: array([[1],\n",
      "       [1.0]], dtype=object), 5: array([[1],\n",
      "       [1.0]], dtype=object), 6: array([[1],\n",
      "       [1.0]], dtype=object), 7: array([[1],\n",
      "       [1.0]], dtype=object), 8: array([[1],\n",
      "       [1.0]], dtype=object), 9: array([[1],\n",
      "       [1.0]], dtype=object), 10: array([[1, 2, 3, 11, 12, 13, 14, 15, 23, 24, 25, 26, 27, 28, 29, 31, 32,\n",
      "        33, 34, 35, 36, 37, 38, 43, 44, 48, 49, 51, 55, 58, 64, 68, 69,\n",
      "        70, 71, 72],\n",
      "       [0.03164556962025317, 0.0189873417721519, 0.0189873417721519,\n",
      "        0.006329113924050633, 0.006329113924050633, 0.006329113924050633,\n",
      "        0.006329113924050633, 0.006329113924050633, 0.056962025316455694,\n",
      "        0.04430379746835443, 0.0759493670886076, 0.1962025316455696,\n",
      "        0.10759493670886076, 0.05063291139240506, 0.012658227848101266,\n",
      "        0.0189873417721519, 0.006329113924050633, 0.012658227848101266,\n",
      "        0.0189873417721519, 0.0189873417721519, 0.012658227848101266,\n",
      "        0.012658227848101266, 0.012658227848101266, 0.0189873417721519,\n",
      "        0.006329113924050633, 0.006329113924050633, 0.012658227848101266,\n",
      "        0.012658227848101266, 0.12025316455696203, 0.02531645569620253,\n",
      "        0.006329113924050633, 0.006329113924050633, 0.006329113924050633,\n",
      "        0.006329113924050633, 0.006329113924050633, 0.006329113924050633]],\n",
      "      dtype=object), 11: array([[10],\n",
      "       [1.0]], dtype=object), 12: array([[10, 23],\n",
      "       [0.3333333333333333, 0.6666666666666666]], dtype=object), 13: array([[10],\n",
      "       [1.0]], dtype=object), 14: array([[10],\n",
      "       [1.0]], dtype=object), 15: array([[10],\n",
      "       [1.0]], dtype=object), 16: array([[17, 18, 19, 20, 21, 22, 23],\n",
      "       [0.16666666666666666, 0.16666666666666666, 0.16666666666666666,\n",
      "        0.125, 0.125, 0.125, 0.125]], dtype=object), 17: array([[16, 18, 19, 20, 21, 22, 23, 26, 55],\n",
      "       [0.15384615384615385, 0.15384615384615385, 0.15384615384615385,\n",
      "        0.11538461538461539, 0.11538461538461539, 0.11538461538461539,\n",
      "        0.11538461538461539, 0.038461538461538464, 0.038461538461538464]],\n",
      "      dtype=object), 18: array([[16, 17, 19, 20, 21, 22, 23],\n",
      "       [0.16666666666666666, 0.16666666666666666, 0.16666666666666666,\n",
      "        0.125, 0.125, 0.125, 0.125]], dtype=object), 19: array([[16, 17, 18, 20, 21, 22, 23],\n",
      "       [0.16, 0.16, 0.16, 0.16, 0.12, 0.12, 0.12]], dtype=object), 20: array([[16, 17, 18, 19, 21, 22, 23],\n",
      "       [0.11538461538461539, 0.11538461538461539, 0.11538461538461539,\n",
      "        0.15384615384615385, 0.19230769230769232, 0.15384615384615385,\n",
      "        0.15384615384615385]], dtype=object), 21: array([[16, 17, 18, 19, 20, 22, 23],\n",
      "       [0.12, 0.12, 0.12, 0.12, 0.2, 0.16, 0.16]], dtype=object), 22: array([[16, 17, 18, 19, 20, 21, 23],\n",
      "       [0.125, 0.125, 0.125, 0.125, 0.16666666666666666,\n",
      "        0.16666666666666666, 0.16666666666666666]], dtype=object), 23: array([[10, 12, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 30, 31],\n",
      "       [0.19148936170212766, 0.0425531914893617, 0.06382978723404255,\n",
      "        0.06382978723404255, 0.06382978723404255, 0.06382978723404255,\n",
      "        0.0851063829787234, 0.0851063829787234, 0.0851063829787234,\n",
      "        0.0425531914893617, 0.02127659574468085, 0.10638297872340426,\n",
      "        0.02127659574468085, 0.02127659574468085, 0.0425531914893617]],\n",
      "      dtype=object), 24: array([[10, 23, 25, 26, 27, 41, 42, 50, 68, 69, 70],\n",
      "       [0.20588235294117646, 0.058823529411764705, 0.38235294117647056,\n",
      "        0.11764705882352941, 0.029411764705882353, 0.058823529411764705,\n",
      "        0.029411764705882353, 0.029411764705882353, 0.029411764705882353,\n",
      "        0.029411764705882353, 0.029411764705882353]], dtype=object), 25: array([[10, 23, 24, 26, 27, 39, 40, 41, 42, 48, 55, 68, 69, 70, 71, 75],\n",
      "       [0.19672131147540983, 0.01639344262295082, 0.21311475409836064,\n",
      "        0.01639344262295082, 0.08196721311475409, 0.01639344262295082,\n",
      "        0.01639344262295082, 0.04918032786885246, 0.03278688524590164,\n",
      "        0.01639344262295082, 0.03278688524590164, 0.08196721311475409,\n",
      "        0.09836065573770492, 0.06557377049180328, 0.01639344262295082,\n",
      "        0.04918032786885246]], dtype=object), 26: array([[10, 17, 24, 25, 27, 43, 49, 51, 54, 55, 72],\n",
      "       [0.45588235294117646, 0.014705882352941176, 0.058823529411764705,\n",
      "        0.014705882352941176, 0.014705882352941176, 0.014705882352941176,\n",
      "        0.04411764705882353, 0.029411764705882353, 0.014705882352941176,\n",
      "        0.3088235294117647, 0.029411764705882353]], dtype=object), 27: array([[10, 23, 24, 25, 26, 28, 29, 31, 33, 43, 48, 58, 68, 69, 70, 71,\n",
      "        72],\n",
      "       [0.3617021276595745, 0.10638297872340426, 0.02127659574468085,\n",
      "        0.10638297872340426, 0.02127659574468085, 0.02127659574468085,\n",
      "        0.02127659574468085, 0.02127659574468085, 0.02127659574468085,\n",
      "        0.02127659574468085, 0.02127659574468085, 0.1276595744680851,\n",
      "        0.02127659574468085, 0.0425531914893617, 0.02127659574468085,\n",
      "        0.02127659574468085, 0.02127659574468085]], dtype=object), 28: array([[10, 27, 44, 45],\n",
      "       [0.5714285714285714, 0.07142857142857142, 0.21428571428571427,\n",
      "        0.14285714285714285]], dtype=object), 29: array([[10, 23, 27, 34, 35, 36, 37, 38],\n",
      "       [0.18181818181818182, 0.09090909090909091, 0.09090909090909091,\n",
      "        0.18181818181818182, 0.18181818181818182, 0.09090909090909091,\n",
      "        0.09090909090909091, 0.09090909090909091]], dtype=object), 30: array([[23, 31],\n",
      "       [0.3333333333333333, 0.6666666666666666]], dtype=object), 31: array([[10, 23, 27, 30],\n",
      "       [0.375, 0.25, 0.125, 0.25]], dtype=object), 32: array([[10],\n",
      "       [1.0]], dtype=object), 33: array([[10, 27],\n",
      "       [0.6666666666666666, 0.3333333333333333]], dtype=object), 34: array([[10, 29, 35, 36, 37, 38],\n",
      "       [0.21428571428571427, 0.14285714285714285, 0.21428571428571427,\n",
      "        0.14285714285714285, 0.14285714285714285, 0.14285714285714285]],\n",
      "      dtype=object), 35: array([[10, 29, 34, 36, 37, 38],\n",
      "       [0.21428571428571427, 0.14285714285714285, 0.21428571428571427,\n",
      "        0.14285714285714285, 0.14285714285714285, 0.14285714285714285]],\n",
      "      dtype=object), 36: array([[10, 29, 34, 35, 37, 38],\n",
      "       [0.18181818181818182, 0.09090909090909091, 0.18181818181818182,\n",
      "        0.18181818181818182, 0.18181818181818182, 0.18181818181818182]],\n",
      "      dtype=object), 37: array([[10, 29, 34, 35, 36, 38],\n",
      "       [0.18181818181818182, 0.09090909090909091, 0.18181818181818182,\n",
      "        0.18181818181818182, 0.18181818181818182, 0.18181818181818182]],\n",
      "      dtype=object), 38: array([[10, 29, 34, 35, 36, 37],\n",
      "       [0.18181818181818182, 0.09090909090909091, 0.18181818181818182,\n",
      "        0.18181818181818182, 0.18181818181818182, 0.18181818181818182]],\n",
      "      dtype=object), 39: array([[25, 52, 55],\n",
      "       [0.3333333333333333, 0.3333333333333333, 0.3333333333333333]],\n",
      "      dtype=object), 40: array([[25],\n",
      "       [1.0]], dtype=object), 41: array([[24, 25, 42, 55, 57, 62, 68, 69, 70, 71, 75],\n",
      "       [0.10526315789473684, 0.15789473684210525, 0.10526315789473684,\n",
      "        0.2631578947368421, 0.05263157894736842, 0.05263157894736842,\n",
      "        0.05263157894736842, 0.05263157894736842, 0.05263157894736842,\n",
      "        0.05263157894736842, 0.05263157894736842]], dtype=object), 42: array([[24, 25, 41],\n",
      "       [0.2, 0.4, 0.4]], dtype=object), 43: array([[10, 26, 27],\n",
      "       [0.6, 0.2, 0.2]], dtype=object), 44: array([[10, 28],\n",
      "       [0.25, 0.75]], dtype=object), 45: array([[28],\n",
      "       [1.0]], dtype=object), 46: array([[47, 48],\n",
      "       [0.3333333333333333, 0.6666666666666666]], dtype=object), 47: array([[46],\n",
      "       [1.0]], dtype=object), 48: array([[10, 25, 27, 46, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68,\n",
      "        69, 71, 73, 74, 75, 76],\n",
      "       [0.017857142857142856, 0.017857142857142856, 0.017857142857142856,\n",
      "        0.03571428571428571, 0.07142857142857142, 0.017857142857142856,\n",
      "        0.125, 0.10714285714285714, 0.017857142857142856,\n",
      "        0.03571428571428571, 0.125, 0.08928571428571429,\n",
      "        0.08928571428571429, 0.05357142857142857, 0.017857142857142856,\n",
      "        0.017857142857142856, 0.017857142857142856, 0.017857142857142856,\n",
      "        0.03571428571428571, 0.03571428571428571, 0.017857142857142856,\n",
      "        0.017857142857142856]], dtype=object), 49: array([[10, 26, 50, 51, 54, 55, 56],\n",
      "       [0.06896551724137931, 0.10344827586206896, 0.034482758620689655,\n",
      "        0.3103448275862069, 0.034482758620689655, 0.41379310344827586,\n",
      "        0.034482758620689655]], dtype=object), 50: array([[24, 49],\n",
      "       [0.5, 0.5]], dtype=object), 51: array([[10, 26, 49, 52, 53, 54, 55],\n",
      "       [0.08695652173913043, 0.08695652173913043, 0.391304347826087,\n",
      "        0.043478260869565216, 0.043478260869565216, 0.08695652173913043,\n",
      "        0.2608695652173913]], dtype=object), 52: array([[39, 51],\n",
      "       [0.5, 0.5]], dtype=object), 53: array([[51],\n",
      "       [1.0]], dtype=object), 54: array([[26, 49, 51, 55],\n",
      "       [0.2, 0.2, 0.4, 0.2]], dtype=object), 55: array([[10, 17, 25, 26, 39, 41, 48, 49, 51, 54, 56, 57, 58, 59, 61, 62,\n",
      "        63, 64, 65],\n",
      "       [0.18269230769230768, 0.009615384615384616, 0.019230769230769232,\n",
      "        0.20192307692307693, 0.009615384615384616, 0.04807692307692308,\n",
      "        0.038461538461538464, 0.11538461538461539, 0.057692307692307696,\n",
      "        0.009615384615384616, 0.009615384615384616, 0.009615384615384616,\n",
      "        0.0673076923076923, 0.04807692307692308, 0.009615384615384616,\n",
      "        0.08653846153846154, 0.009615384615384616, 0.04807692307692308,\n",
      "        0.019230769230769232]], dtype=object), 56: array([[49, 55],\n",
      "       [0.5, 0.5]], dtype=object), 57: array([[41, 48, 55, 58, 59, 61, 62, 63, 64, 65, 67],\n",
      "       [0.0625, 0.0625, 0.0625, 0.0625, 0.125, 0.0625, 0.125, 0.125,\n",
      "        0.0625, 0.0625, 0.1875]], dtype=object), 58: array([[10, 27, 48, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 70, 76],\n",
      "       [0.04395604395604396, 0.06593406593406594, 0.07692307692307693,\n",
      "        0.07692307692307693, 0.01098901098901099, 0.16483516483516483,\n",
      "        0.04395604395604396, 0.06593406593406594, 0.18681318681318682,\n",
      "        0.04395604395604396, 0.10989010989010989, 0.054945054945054944,\n",
      "        0.03296703296703297, 0.01098901098901099, 0.01098901098901099]],\n",
      "      dtype=object), 59: array([[48, 55, 57, 58, 60, 61, 62, 63, 64, 65, 66],\n",
      "       [0.08823529411764706, 0.07352941176470588, 0.029411764705882353,\n",
      "        0.22058823529411764, 0.029411764705882353, 0.07352941176470588,\n",
      "        0.19117647058823528, 0.07352941176470588, 0.1323529411764706,\n",
      "        0.07352941176470588, 0.014705882352941176]], dtype=object), 60: array([[48, 58, 59, 61, 62, 63, 64, 65, 66],\n",
      "       [0.05263157894736842, 0.21052631578947367, 0.10526315789473684,\n",
      "        0.10526315789473684, 0.15789473684210525, 0.10526315789473684,\n",
      "        0.10526315789473684, 0.10526315789473684, 0.05263157894736842]],\n",
      "      dtype=object), 61: array([[48, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66],\n",
      "       [0.05263157894736842, 0.02631578947368421, 0.02631578947368421,\n",
      "        0.15789473684210525, 0.13157894736842105, 0.05263157894736842,\n",
      "        0.15789473684210525, 0.07894736842105263, 0.15789473684210525,\n",
      "        0.13157894736842105, 0.02631578947368421]], dtype=object), 62: array([[41, 48, 55, 57, 58, 59, 60, 61, 63, 64, 65, 66, 76],\n",
      "       [0.011904761904761904, 0.08333333333333333, 0.10714285714285714,\n",
      "        0.023809523809523808, 0.20238095238095238, 0.15476190476190477,\n",
      "        0.03571428571428571, 0.07142857142857142, 0.07142857142857142,\n",
      "        0.14285714285714285, 0.05952380952380952, 0.023809523809523808,\n",
      "        0.011904761904761904]], dtype=object), 63: array([[48, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 76],\n",
      "       [0.1282051282051282, 0.02564102564102564, 0.05128205128205128,\n",
      "        0.10256410256410256, 0.1282051282051282, 0.05128205128205128,\n",
      "        0.07692307692307693, 0.15384615384615385, 0.10256410256410256,\n",
      "        0.1282051282051282, 0.02564102564102564, 0.02564102564102564]],\n",
      "      dtype=object), 64: array([[10, 48, 55, 57, 58, 59, 60, 61, 62, 63, 65, 66, 76],\n",
      "       [0.015151515151515152, 0.07575757575757576, 0.07575757575757576,\n",
      "        0.015151515151515152, 0.15151515151515152, 0.13636363636363635,\n",
      "        0.030303030303030304, 0.09090909090909091, 0.18181818181818182,\n",
      "        0.06060606060606061, 0.10606060606060606, 0.045454545454545456,\n",
      "        0.015151515151515152]], dtype=object), 65: array([[48, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 76],\n",
      "       [0.06976744186046512, 0.046511627906976744, 0.023255813953488372,\n",
      "        0.11627906976744186, 0.11627906976744186, 0.046511627906976744,\n",
      "        0.11627906976744186, 0.11627906976744186, 0.11627906976744186,\n",
      "        0.16279069767441862, 0.046511627906976744, 0.023255813953488372]],\n",
      "      dtype=object), 66: array([[48, 58, 59, 60, 61, 62, 63, 64, 65, 76],\n",
      "       [0.0625, 0.1875, 0.0625, 0.0625, 0.0625, 0.125, 0.0625, 0.1875,\n",
      "        0.125, 0.0625]], dtype=object), 67: array([[57],\n",
      "       [1.0]], dtype=object), 68: array([[10, 24, 25, 27, 41, 48, 69, 70, 71, 75],\n",
      "       [0.04, 0.04, 0.2, 0.04, 0.04, 0.04, 0.24, 0.16, 0.08, 0.12]],\n",
      "      dtype=object), 69: array([[10, 24, 25, 27, 41, 48, 68, 70, 71, 75],\n",
      "       [0.037037037037037035, 0.037037037037037035, 0.2222222222222222,\n",
      "        0.07407407407407407, 0.037037037037037035, 0.037037037037037035,\n",
      "        0.2222222222222222, 0.14814814814814814, 0.07407407407407407,\n",
      "        0.1111111111111111]], dtype=object), 70: array([[10, 24, 25, 27, 41, 58, 68, 69, 71, 75],\n",
      "       [0.05, 0.05, 0.2, 0.05, 0.05, 0.05, 0.2, 0.2, 0.1, 0.05]],\n",
      "      dtype=object), 71: array([[10, 25, 27, 41, 48, 68, 69, 70, 75],\n",
      "       [0.08333333333333333, 0.08333333333333333, 0.08333333333333333,\n",
      "        0.08333333333333333, 0.08333333333333333, 0.16666666666666666,\n",
      "        0.16666666666666666, 0.16666666666666666, 0.08333333333333333]],\n",
      "      dtype=object), 72: array([[10, 26, 27],\n",
      "       [0.25, 0.5, 0.25]], dtype=object), 73: array([[48, 74],\n",
      "       [0.4, 0.6]], dtype=object), 74: array([[48, 73],\n",
      "       [0.4, 0.6]], dtype=object), 75: array([[25, 41, 48, 68, 69, 70, 71],\n",
      "       [0.23076923076923078, 0.07692307692307693, 0.07692307692307693,\n",
      "        0.23076923076923078, 0.23076923076923078, 0.07692307692307693,\n",
      "        0.07692307692307693]], dtype=object), 76: array([[48, 58, 62, 63, 64, 65, 66],\n",
      "       [0.14285714285714285, 0.14285714285714285, 0.14285714285714285,\n",
      "        0.14285714285714285, 0.14285714285714285, 0.14285714285714285,\n",
      "        0.14285714285714285]], dtype=object)}\n",
      "\n",
      "Node Mapping:\n",
      "{'Napoleon': 0, 'Myriel': 1, 'MlleBaptistine': 2, 'MmeMagloire': 3, 'CountessDeLo': 4, 'Geborand': 5, 'Champtercier': 6, 'Cravatte': 7, 'Count': 8, 'OldMan': 9, 'Valjean': 10, 'Labarre': 11, 'Marguerite': 12, 'MmeDeR': 13, 'Isabeau': 14, 'Gervais': 15, 'Listolier': 16, 'Tholomyes': 17, 'Fameuil': 18, 'Blacheville': 19, 'Favourite': 20, 'Dahlia': 21, 'Zephine': 22, 'Fantine': 23, 'MmeThenardier': 24, 'Thenardier': 25, 'Cosette': 26, 'Javert': 27, 'Fauchelevent': 28, 'Bamatabois': 29, 'Perpetue': 30, 'Simplice': 31, 'Scaufflaire': 32, 'Woman1': 33, 'Judge': 34, 'Champmathieu': 35, 'Brevet': 36, 'Chenildieu': 37, 'Cochepaille': 38, 'Pontmercy': 39, 'Boulatruelle': 40, 'Eponine': 41, 'Anzelma': 42, 'Woman2': 43, 'MotherInnocent': 44, 'Gribier': 45, 'MmeBurgon': 46, 'Jondrette': 47, 'Gavroche': 48, 'Gillenormand': 49, 'Magnon': 50, 'MlleGillenormand': 51, 'MmePontmercy': 52, 'MlleVaubois': 53, 'LtGillenormand': 54, 'Marius': 55, 'BaronessT': 56, 'Mabeuf': 57, 'Enjolras': 58, 'Combeferre': 59, 'Prouvaire': 60, 'Feuilly': 61, 'Courfeyrac': 62, 'Bahorel': 63, 'Bossuet': 64, 'Joly': 65, 'Grantaire': 66, 'MotherPlutarch': 67, 'Gueulemer': 68, 'Babet': 69, 'Claquesous': 70, 'Montparnasse': 71, 'Toussaint': 72, 'Child1': 73, 'Child2': 74, 'Brujon': 75, 'MmeHucheloup': 76}\n"
     ]
    }
   ],
   "source": [
    "# Create the Les Misérables graph\n",
    "les_miserables_graph1 = les_miserables_graph()\n",
    "\n",
    "# Convert nodes to integers and get the mapping\n",
    "les_miserables_graph_int, node_mapping = convert_nodes_to_integers(les_miserables_graph1)\n",
    "\n",
    "# Convert the graph to an adjacency list\n",
    "adjacency_list = sparse_matrix_to_adjacency_list(les_miserables_graph_int)\n",
    "\n",
    "# Print the adjacency list and node mapping\n",
    "print(\"Adjacency List:\")\n",
    "print(adjacency_list)\n",
    "\n",
    "print(\"\\nNode Mapping:\")\n",
    "print(node_mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Node2Vec object created\n",
      "Training started...\n",
      "Start generating random walks\n",
      "Done generating random walks in 0.12 seconds\n",
      "Creating word2vec model\n",
      "Done training the model on the 0th iteration\n",
      "Done training the model on the 10th iteration\n",
      "Done training the model on the 20th iteration\n",
      "Done training the model on the 30th iteration\n",
      "Done training the model on the 40th iteration\n",
      "Done training the model on the 50th iteration\n",
      "Done training the model on the 60th iteration\n",
      "Done training the model on the 70th iteration\n",
      "Done creating word2vec model\n",
      "Training completed\n",
      "Saving embeddings...\n",
      "Embeddings saved\n",
      "All done in  0.12198853492736816  seconds\n"
     ]
    }
   ],
   "source": [
    "dw = Node2Vec(adjacency_list, 10, 128, 80, 40, 4, 1)\n",
    "print(\"Node2Vec object created\", file=sys.stdout)\n",
    "\n",
    "master_start = time.time()\n",
    "\n",
    "print(\"Training started...\", file=sys.stdout)\n",
    "dw.train(20, 0.05)\n",
    "print(\"Training completed\", file=sys.stdout)\n",
    "\n",
    "print(\"Saving embeddings...\", file=sys.stdout)\n",
    "# output embeddings to an output file\n",
    "dw.model.wv.save_word2vec_format('les_miserables.txt')\n",
    "print(\"Embeddings saved\", file=sys.stdout)\n",
    "\n",
    "master_end = time.time()\n",
    "\n",
    "print(\"All done in \", master_end - master_start, \" seconds\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
